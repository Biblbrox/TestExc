data = dlmread("2017-04-11_-_14-06-06_4_raw.csv", ";");
data = data(:, 1:2);
noise = dlmread("noise.csv")(:, 1:2);
figure(1);
plot(data);
grid on;
title("Сырые данные");
# 1. Вычесть шумовую дорожку из сигналов (содержится в файле noise.csv)
data -= noise;
figure(2);
plot(data);
grid on;
title("После удаления шума");	
# 2. Удалить «нулевую» дорожку до оцифрованных значений отражённого сигнала
data = data(112:end, :);	 # Черновой вариант
figure(3);
plot(data);
grid on;
title("После удаления нулевой дорожки");	
# 3. Инвертировать сигнал
data = -data;
figure(3);
plot(data);
grid on;
title("После инвертирования сигнала");	

# 4. Привести нормировку, чтобы значения сигнала были в диапазоне от [0; signal_max]
max_signal = abs(max(data));
max_data = max(data);
min_data = min(data);	
data -= min(data);

# 5. Нормировать сигнал по расстоянию на 12 км
x = linspace(0, length(data));
t = linspace(0, 12000, length(data));		
data = (data - min(x)) ./ (max(x) - min(x)) .* (12000 - 0) + 0;	


# 6. Применить фильтрацию, например, медианным фильтром
window_size = 3;
filtered = [];
cor_data = [data(1, :);	 data;	 data(end, :)];	
for i = [2:length(cor_data) - 1]
	window = sort([cor_data(i - 1, :); cor_data(i, :); cor_data(i + 1, :)]);
	filtered = [filtered, window(2)];	
endfor;	

# 7. Результирующий сигнал должен быть сформирован из двух предобработанных ранее (см. рис. 3), согласно формуле:
parallel = data(:, 1);
perpendicular = data(:, 2);	
result_data = sqrt(parallel .^ 2 + perpendicular .^ 2);	
figure(1);	
plot(t, result_data);
grid on;
